===============================
 Test 2-matrix_divided.py
===============================

This library is very simple, since it only has one function called
``def matrix_divided(matrix, div)``.

Numbers
=======

``def matrix_divided(matrix, div)`` returns the new matrix of its arguments.  For numbers,
that value is equivalent to using the ``/`` operator.

::

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided
    >>> matrix_divided([[1, 2, 3],[4, 5, 6]], 3)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

It also works with 0 value.

::

    >>> matrix_divided([[1, 2, 3],[4, 5, 6]], 0)
    Traceback (most recent call last):
        ...
    ZeroDivisionError: division by zero

It also works with strings in list.

::

    >>> matrix_divided([[1, 2, 3],[4, 5, "something"]], 3)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

It also works with different rows sizes.

::

    >>> matrix_divided([[1, 2, 3],[4, 5]], 3)
    Traceback (most recent call last):
        ...
    TypeError: Each row of the matrix must have the same size

It also works with strings values.

::

    >>> matrix_divided([[1, 2, 3],[4, 5, 6]], "hi")
    Traceback (most recent call last):
        ...
    TypeError: div must be a number

    >>> matrix_divided([[1, 2, 3],[4, 5, 6]], 3.1)
    [[0.32, 0.65, 0.97], [1.29, 1.61, 1.94]]

    >>> matrix_divided([], 3)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided((1, 2, 3), 3)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats
